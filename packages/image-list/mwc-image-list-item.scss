@use 'sass:list';
@use 'sass:map';
@use '@material/feature-targeting/feature-targeting';
@use '@material/shape/mixins' as shape-mixins;
@use '@material/shape/functions' as shape-functions;
@use '@material/theme/theme';
@use '@material/typography/typography';
@use '@material/image-list/_variables';
@use '@material/image-list/_mixins';

@mixin core-styles($query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);
  $feat-structure: feature-targeting.create-target($query, structure);

  :host {
    @include feature-targeting.targets($feat-structure) {
      // Supports absolute positioning of protected supporting content for item, and image for image-aspect-container
      position: relative;
      box-sizing: border-box;
    }
  }

  :host {
    @include feature-targeting.targets($feat-structure) {
      list-style-type: none;
    }
  }

  // postcss-bem-linter: end
}

// Standard Image List

@mixin standard-columns(
  $column-count,
  $gutter-size: variables.$standard-gutter-size,
  $query: feature-targeting.all()
) {
  $feat-structure: feature-targeting.create-target($query, structure);

  // This uses margin rather than padding to facilitate properly positioning the supporting content element when
  // --with-text-protection is used.
  :host {
    @include feature-targeting.targets($feat-structure) {
      // Subtract extra fraction from each item's width to ensure correct wrapping in IE/Edge which round differently
      width: calc(
        100% / #{$column-count} - #{$gutter-size + 1 / $column-count}
      );
      margin: $gutter-size / 2;
    }
  }
}

@include core-styles;
@include standard-columns(4);
